[the JS keyword 'this']
* reserved keyword in JavaScript
* 'this' is determined by four rules (global, object/implicit, explicit, new)
    - When 'this' is used outside a declared object, it references the base container of the 
      application(in the browser this is the window).
    - I can accidentally declare global variables by using this.newitemname inside a function or outside
      a declared object.
    - The value of the keyword this will always be the closest parent object.
    - Call, Apply, and Bind are used to explicitly set the value of the keyword 'this'
      object.functionName.call(objectToSetAsThis, functionParam1, functionParam2, functionParam3, ...)
      object.functionName.apply(objectToSetAsThis, [functionParam1, functionParam2, functionParam3, ...])
      var functionForLater = object.functionName.bind(objectToSetAsThis, functionParam1, functionParam2, functionParam3, ...)
    - A timeout being activated later will have a default global context. To resolve this, use bind on the
      callback to set the context to whatever object you want.
    - The value of 'this' changes when the new keyword is used

[Object Oriented Programming]

Objectives:
(1) Define what OOP is
(2) Understand the four things the 'new' keyword does
(3) Use constructors to create objects
(4) Use call and apply to refactor the constructors

(1) - Object Oriented Programming (OOP) is a way to create object blueprints (classes)
      which can be reused over and over to create new objects (instances).
(2) - The 'new' keyword creates an object, local to the function, sets the keyword
      'this' equal to that object, adds an implicit "return this" to the end of the function,
      and gives acces to __proto__ (dunder proto). I dont know what dunder proto does yet.
(3) - Constructor functions utilize the keyword 'this' to create object instances.
    - They need to be called with the 'new' keyword to instantiate an object.
(4) - The call/apply/bind methods can be used to call one constructor inside another.
    - This reuse of constructors is very similar to inheritance in class supporting languages.
    - We don't need to make a function to be called later, so bind 
      typically will not be used in this case. 

* __proto__ is the object that specifies methods and objects inherited by parent classes when 
  creating JS constructors/prototypes

* most methods should be added to __proto__ to prevent each instance from redefining functions

More Objectives:
(5) Understand what a 'closure' is in JS
    - closure allows you to "hide" methods and variables by wrapping one funciton in another funciton where the
      inner function is returned by the outer function. The programmer has access to the inner function's variables
      and methods, but not the outer funciton's. The inner function has access to the outer functions methods/variables.
(6) Understand how to use closure to emulate a private variables
(7) Understand a couple of 'real world' use cases for closure