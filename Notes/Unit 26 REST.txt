RESTful Routing

* REST is a conventional format for mapping our http routing to
  the CreateReadUpdateDestroy standard.
    - this allows other developers to understand your code
  
* There are 7 RESTful routes
    - dogs can be replaced by the generalized name for whichever element we are manipulating in the database
name     path               HTTP verb     description   
========================================
Index    /dogs              GET           Display a list of all dogs
New      /dogs/new          GET           Displays a form to make a new dogs
Create   /dogs              POST          Create new dog then redirect somewhere
Show     /dogs/:id          GET           Shows info about one dog
Edit     /dogs/:id/edit     GET           Show edit form for one dog
Update   /dogs/:id          PUT           Update a particular dog, then redirect somewhere
Destroy  /dogs/:id          DELETE        Delete a particular dog, then redirect somewhere

    - show should bring up a speciallized page for the picked element
    - edit should allow you to change the content in a picked element
    - update should be the request that is sent to actually change the
      element's information after an element is manipulated in the
      edit form
    - destroy should remove a specified element from the database entirely
    
* HTML does not support PUT requests in forms
    - To work around this, we add action="/blogs/<%= blog._id %>?_method=PUT" to the form
      and make the method="POST"
    - This lets the library "method-override" recognize the request as a put request and 
      route it to our javascript app.put() method in our app.js file
      
* Nested routes can be helpful for manipulating data associations

INDEX   /campgrounds                    GET
NEW     /campgrounds/new                GET
CREATE  /campgrounds                    POST
SHOW    /campgrounds/:id                GET

<Nested>
NEW     /campgrounds/:id/comments/new   GET
CREATE  /campgrounds/:id/comments       POST